service: bigtext 
package:
  include:
    - fonts/**
    - scripts/**
  exclude:
    - node_modules/**
    - site/**
provider:
  name: aws
  runtime: python3.7
  stage: prod
  memorySize: 128

plugins:
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters

custom:
  pythonRequirements:
    # Run pip install in a Linux Docker container, in case there are
    # native dependencies.
    dockerizePip: false
  customDomain:
    domainName: ${file(./variables.yml):API_BASE_URL}
    certificateName: ${file(./variables.yml):CERTIFICATE_NAME}
    basePath: "bigtext"
    stage: ${self:provider.stage}
    createRoute53Record: true
  vars: ${file(./variables.yml)}

functions:
  # provides the /bigtext/generate endpoint for handling various Slack slash commands
  generate:
    handler: "api/commands_handler.generate"
    environment:
      SLACK_SIGNING_SECRET: ${ssm:/${self:provider.stage}/bigtext/signingsecret~true}
      BIG_LAMBDA_NAME: "${self:service}-${self:provider.stage}-big"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - lambda:InvokeFunction
        Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-big"
    events:
      - http:
          path: generate 
          method: post 
    tags:
      Project: BigText
  # provides the /bigtext/events endpoint for handling incoming Slack events
  event_handler:
    handler: "api/events_handler.events"
    environment:
      SLACK_SIGNING_SECRET: ${ssm:/${self:provider.stage}/bigtext/signingsecret~true}
      BIG_LAMBDA_NAME: "${self:service}-${self:provider.stage}-big"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - lambda:InvokeFunction
        Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-big"
    events:
      - http:
          path: events
          method: post
    tags:
      Project: BigText
  
  # Services the /big slash command. Manually invoked.
  big:
    handler: "api/commands.big"
    timeout: 15
    memorySize: 832
    environment:
      S3_CONTENT_BUCKET: ${self:custom.vars.S3_BUCKET_NAME}
      WEB_APP_URL: ${self:custom.vars.WEB_APP_URL}
      # Only needed to link people into the auth flow.
      SLACK_OAUTH2_CLIENT_ID: ${ssm:/${self:provider.stage}/bigtext/client_id~true}
    iamRoleStatements:
      - Effect: "Allow"
        Action: "dynamodb:GetItem"
        Resource:
          Fn::Join:
            - ""
            - - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/"
              - "Ref" : "SlackStorage"
      - Effect: "Allow"        
        Action:
          - s3:PutObject
        Resource:
          Fn::Join:
            - ""
            - - "arn:aws:s3:::"
              - Ref: "BigDougieTech"
              - "/*"

    tags:
      Project: BigText
  
  # used for installation of the application
  oauth2callback:
    handler: "api/oauth.callback"
    environment:
      WEB_APP_URL: ${self:custom.vars.WEB_APP_URL}
      SLACK_OAUTH2_CLIENT_ID: ${ssm:/${self:provider.stage}/bigtext/client_id~true}
      SLACK_OAUTH2_CLIENT_SECRET: ${ssm:/${self:provider.stage}/bigtext/client_secret~true}
      SLACK_OAUTH2_APP_ID: ${ssm:/${self:provider.stage}/bigtext/app_id~true}

    events:
      - http:
          path: 'oauth2/callback'
          method: get 
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "dynamodb:UpdateItem"
          - "dynamodb:DeleteItem"
        Resource:
          Fn::Join:
            - ""
            - - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/"
              - "Ref" : "SlackStorage"
    tags:
      Project: BigText

resources:
  Resources:
    SlackStorage:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "BigTextSlackStorage"
        AttributeDefinitions:
          - AttributeName: team
            AttributeType: S
          - AttributeName: user
            AttributeType: S
        KeySchema:
          - AttributeName: team
            KeyType: HASH
          - AttributeName: user
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    BigDougieTech:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.vars.S3_BUCKET_NAME}

    CloudFrontGetObject:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: "CloudFrontAllowReads"
          Version: "2012-10-17"
          Statement:
            - Sid: "CloudFrontReadForGetObject"
              Effect: "Allow"
              Action: "s3:GetObject"
              Principal:
                CanonicalUser: !GetAtt [WebDistributionOAI, S3CanonicalUserId]
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: "BigDougieTech"
                    - "/*"
        Bucket:
          Ref: "BigDougieTech"

    AppDNSIPv4:
      Type: AWS::Route53::RecordSet
      Properties:
        AliasTarget:
          DNSName: !GetAtt [WebDistribution, DomainName]
          HostedZoneId: "Z2FDTNDATAQYW2" # Hosted Zone ID for CloudFront distributions
        HostedZoneId: ${self:custom.vars.ROUTE_53_HOSTED_ZONE_ID}
        Name: ${self:custom.vars.WEB_APP_URL}
        Type: A

    AppDNSIPv6:
      Type: AWS::Route53::RecordSet
      Properties:
        AliasTarget:
          DNSName: !GetAtt [WebDistribution, DomainName]
          HostedZoneId: "Z2FDTNDATAQYW2" # Hosted Zone ID for CloudFront distributions
        HostedZoneId: ${self:custom.vars.ROUTE_53_HOSTED_ZONE_ID}
        Name: ${self:custom.vars.WEB_APP_URL}
        Type: AAAA

    WebDistributionOAI:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "Allows CloudFront to access Big Text content bucket"

    WebDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.vars.WEB_APP_URL}
          Comment: ${self:custom.vars.WEB_APP_URL}
          CustomErrorResponses:
            - ErrorCachingMinTTL: 60
              ErrorCode: 403
              ResponseCode: 404
              ResponsePagePath: "/404.html"
          DefaultCacheBehavior:
            Compress: true
            DefaultTTL: 2592000
            ForwardedValues:
              QueryString: false
            LambdaFunctionAssociations:
              - EventType: "viewer-response"
                LambdaFunctionARN: ${self:custom.vars.EDGE_LAMBDA_ARN}
            TargetOriginId: "content-s3-origin"
            ViewerProtocolPolicy: "redirect-to-https"
          DefaultRootObject: "index.html"
          Enabled: true
          IPV6Enabled: true
          Origins:
            - DomainName: !GetAtt [BigDougieTech, DomainName]
              Id: "content-s3-origin"
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - "/"
                    - - 'origin-access-identity/cloudfront'
                      - Ref: WebDistributionOAI
          PriceClass: "PriceClass_100"
          ViewerCertificate:
            AcmCertificateArn:
              Fn::Join:
                - ":"
                - - "arn:aws:acm"
                  - Ref: "AWS::Region"
                  - Ref: "AWS::AccountId"
                  - Fn::Join:
                    - "/"
                    - - "certificate"
                      - ${self:custom.vars.ACM_CERTIFICATE_ID}
            MinimumProtocolVersion: "TLSv1.1_2016"
            SslSupportMethod: "sni-only"

